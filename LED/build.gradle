buildscript {
  repositories {
    mavenRepo urls: 'http://gradle.artifactoryonline.com/gradle/plugins'
  }
  dependencies {
    classpath "org.gradle.plugins:gradle-idea-plugin:0.2"
  }
}

apply plugin: 'org.gradle.idea'


ideaProject {
  javaVersion = '1.6'

  withXml { root ->
    root.component.find { it.@name == 'ProjectRootManager' }.@languageLevel = 'JDK_1_6'
    root.component.find { it.@name == 'ProjectRootManager' }.@'project-jdk-name' = '1.6'
    root.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
  }
}


ideaModule {
  withXml { root ->
    configurations.scalaTools.files.each {file ->
      if (file.name.startsWith('scala-compiler')) compiler = "${file.canonicalPath}"
      if (file.name.startsWith('scala-library')) library = "${file.canonicalPath}"
    }

    configuration = root.appendNode('component', ['name': 'FacetManager']).appendNode('facet', ['type': 'Scala', 'name': 'Scala']).appendNode('configuration')
    configuration.appendNode('option', ['name': 'takeFromSettings', 'value': 'true'])
    configuration.appendNode('option', ['name': 'myScalaCompilerJarPaths']).appendNode('array').appendNode('option', ['value': compiler])

    configuration.appendNode('option', ['name': 'myScalaSdkJarPaths']).appendNode('array').appendNode('option', ['value': library])
  }
}

apply plugin: 'eclipse'

apply plugin: 'scala'

defaultTasks 'build', 'scalatest'

repositories {
  mavenCentral()
  mavenRepo urls: 'http://scala-tools.org/repo-releases/'
//  mavenRepo urls: 'http://scala-tools.org/repo-snapshots/'
}

dependencies {
  // Lib for scala tools
  scalaTools 'org.scala-lang:scala-library:2.8.0'
  scalaTools 'org.scala-lang:scala-compiler:2.8.0'

  // Lib for scala api
  compile 'org.scala-lang:scala-library:2.8.0'
  compile 'org.scalatest:scalatest:1.2'
}

task scalatest << {
  ant.taskdef(
          name: 'scalatest',
          classname: 'org.scalatest.tools.ScalaTestAntTask',
          classpath: configurations.compile.asPath + ':' + compileScala.destinationDir
  )

  ant.scalatest(
          runpath: sourceSets.test.classesDir,
          haltonfailure: 'true',
          fork: 'false'
//          ,reporter(type: 'stdout', config: "FAB")
  )
}

task listDependencies << {
  configurations.scalaTools.getAllDependencies(ExternalDependency).each {dependency ->
    configurations.scalaTools.files(dependency).each {file ->
      println "${dependency.group}:${dependency.name}:${file.name.split('\\.')[-1]} = ${file.canonicalPath}"
    }
  }

  configurations.scalaTools.files.each {file ->
    if (file.name.startsWith('scala-compiler')) println "${file.canonicalPath}"
  }
}
